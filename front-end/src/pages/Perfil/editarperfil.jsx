import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
// Importa as funÃ§Ãµes do seu serviÃ§o de API
import { fetchUsuarioByCpf, updateUsuario } from '../../services/usuarioService'; 
import Sidebar from '../../components/Sidebar/Sidebar';
import Header from '../../components/Header/Header';
import './editarperfil.css';

const EditarUsuario = () => {
Â  // ðŸš¨ ATENÃ‡ÃƒO: Mudando de 'email' para 'cpf' para coincidir com a API
Â  const { cpf } = useParams(); 
Â  const navigate = useNavigate();

Â  const [sidebarOpen, setSidebarOpen] = useState(true);
Â  const [loading, setLoading] = useState(true); // Para controle de carregamento
Â  const [error, setError] = useState(null); // Para controle de erro

Â  // Estado para armazenar o CPF original, caso ele seja alterado no formulÃ¡rio
Â  const [originalCpf, setOriginalCpf] = useState(''); 
    
Â  const [formData, setFormData] = useState({
Â  Â  nome: '',
Â  Â  cpf: '',
Â  Â  perfil: '',
Â  Â  email: '',
Â  Â  senha: '', // Apenas para Nova Senha
Â  Â  foto: null, // Pode ser o objeto File ou a URL da foto atual (string)
Â  });

Â  // 1. Carregar dados do usuÃ¡rio ao montar o componente
Â  useEffect(() => {
Â  Â  const fetchUser = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  // Usa o parÃ¢metro CPF da URL
Â  Â  Â  Â  const user = await fetchUsuarioByCpf(cpf); 
        
Â  Â  Â  Â  // Seta o CPF original para ser usado na rota de atualizaÃ§Ã£o
Â  Â  Â  Â  setOriginalCpf(user.cpf); 

Â  Â  Â  Â  // Popula o formulÃ¡rio. O campo senha Ã© sempre vazio no frontend.
Â  Â  Â  Â  setFormData({
Â  Â  Â  Â  Â  nome: user.nome || '',
Â  Â  Â  Â  Â  cpf: user.cpf || '',
Â  Â  Â  Â  Â  perfil: user.perfil || '',
Â  Â  Â  Â  Â  email: user.email || '',
Â  Â  Â  Â  Â  senha: '', // A senha nunca Ã© carregada
Â  Â  Â  Â  Â  foto: user.foto || null, // Se for string (URL), armazena a URL
Â  Â  Â  Â  });
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error('Erro ao carregar usuÃ¡rio:', err);
Â  Â  Â  Â  setError('NÃ£o foi possÃ­vel carregar os dados do usuÃ¡rio.');
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  if (cpf) fetchUser();
Â  }, [cpf]); // DependÃªncia no CPF da URL

Â  const handleChange = (e) => {
Â  Â  const { name, value } = e.target;
Â  Â  setFormData((prev) => ({ ...prev, [name]: value }));
Â  };

Â  const handlePhotoChange = (e) => {
Â  Â  const file = e.target.files[0];
Â  Â  // Quando o usuÃ¡rio escolhe um novo arquivo, 'foto' Ã© um objeto File
Â  Â  setFormData((prev) => ({ ...prev, foto: file })); 
Â  };

Â  // 2. Enviar dados atualizados para o backend
Â  const handleSave = async (e) => {
Â  Â  e.preventDefault();
    
    // Separa os dados de texto do objeto File (se houver)
Â  Â  const { foto, ...restOfData } = formData;
    
    // Verifica se 'foto' Ã© um novo arquivo (objeto File)
    const newPhotoFile = foto instanceof File ? foto : null; 

Â  Â  try {
Â  Â  Â  // Chama a funÃ§Ã£o do serviÃ§o, usando o CPF original para a rota
Â  Â  Â  await updateUsuario(originalCpf, restOfData, newPhotoFile); 
Â  Â  Â  alert('UsuÃ¡rio atualizado com sucesso!');
Â  Â  Â  navigate('/usuarios');
Â  Â  } catch (err) {
Â  Â  Â  console.error("Erro ao salvar usuÃ¡rio:", err);
Â  Â  Â  alert('Erro ao atualizar usuÃ¡rio. Verifique o console.');
Â  Â  }
Â  };

Â  const handleCancel = () => {
Â  Â  navigate('/usuarios');
Â  };
    
Â  if (loading) {
Â  Â  return <div className="loading-container"><p>Carregando usuÃ¡rio...</p></div>;
Â  }

Â  if (error) {
Â  Â  return <div className="error-container"><p>{error}</p></div>;
Â  }

Â  return (
Â  Â  <div className="app">
Â  Â  Â  {/* Sidebar */}
Â  Â  Â  <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />

Â  Â  Â  {/* ConteÃºdo principal */}
Â  Â  Â  <div className={`main-content ${sidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>
Â  Â  Â  Â  {/* Header */}
Â  Â  Â  Â  <Header onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} />

Â  Â  Â  Â  {/* ConteÃºdo da pÃ¡gina */}
Â  Â  Â  Â  <div className="content edit-user-page">
Â  Â  Â  Â  Â  <h1 className="edit-user-title">Editar usuÃ¡rio</h1>

Â  Â  Â  Â  Â  <div className="edit-user-card">
Â  Â  Â  Â  Â  Â  <form onSubmit={handleSave} className="edit-user-form">
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  name="nome"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Nome*"
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.nome}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  className="form-input"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  name="cpf"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="CPF*"
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.cpf}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  className="form-input"
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  {/* Campo de seleÃ§Ã£o de perfil */}
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  name="perfil"
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.perfil}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  className="form-input"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="" disabled>Selecione o perfil</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Chefe">Chefe</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Analista">Analista</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="Administrador">Administrador</option>
Â  Â  Â  Â  Â  Â  Â  </select>

Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="email"
Â  Â  Â  Â  Â  Â  Â  Â  name="email"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="E-mail"
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.email}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  className="form-input"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="password"
Â  Â  Â  Â  Â  Â  Â  Â  name="senha"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Nova Senha (Deixe em branco para nÃ£o alterar)"
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.senha}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  className="form-input"
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  <div className="add-photo-area">
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  Â  Â  Â  id="photoUpload"
Â  Â  Â  Â  Â  Â  Â  Â  Â  name="foto"
Â  Â  Â  Â  Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handlePhotoChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ display: 'none' }}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="photoUpload" className="add-photo-button">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Adicionar/Trocar foto
Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  {formData.foto && (
                    <p className="file-name">
                        {/* Exibe o nome do arquivo (se for File) ou um marcador (se for URL string) */}
                        {formData.foto instanceof File ? formData.foto.name : 'Foto atual carregada'}
                    </p>
                )}
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div className="action-buttons">
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="cancel-button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleCancel}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancelar
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <button type="submit" className="save-button">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Salvar
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default EditarUsuario;